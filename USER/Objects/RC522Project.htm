<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\RC522Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\RC522Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed May 26 17:33:25 2021
<BR><P>
<H3>Maximum Stack Usage =       1156 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; genRandCode &rArr; QRcode_encodeString &rArr; QRcode_encodeStringReal &rArr; QRcode_encodeInput &rArr; QRcode_encodeMask &rArr; Mask_mask &rArr; Mask_evaluateSymbol &rArr; Mask_calcN2
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[4d]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[30]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[f5]">QRinput_encodeBitStream</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f5]">QRinput_encodeBitStream</a><BR>
 <LI><a href="#[96]">FrameFiller_next</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[96]">FrameFiller_next</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[30]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel2_IRQHandler</a> from ws2812.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[46]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3e]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3d]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[40]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3f]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">Mask_mask0</a> from mask.o(i.Mask_mask0) referenced 4 times from mask.o(.data)
 <LI><a href="#[9]">Mask_mask1</a> from mask.o(i.Mask_mask1) referenced 4 times from mask.o(.data)
 <LI><a href="#[a]">Mask_mask2</a> from mask.o(i.Mask_mask2) referenced 4 times from mask.o(.data)
 <LI><a href="#[b]">Mask_mask3</a> from mask.o(i.Mask_mask3) referenced 4 times from mask.o(.data)
 <LI><a href="#[c]">Mask_mask4</a> from mask.o(i.Mask_mask4) referenced 2 times from mask.o(.data)
 <LI><a href="#[d]">Mask_mask5</a> from mask.o(i.Mask_mask5) referenced 2 times from mask.o(.data)
 <LI><a href="#[e]">Mask_mask6</a> from mask.o(i.Mask_mask6) referenced 2 times from mask.o(.data)
 <LI><a href="#[f]">Mask_mask7</a> from mask.o(i.Mask_mask7) referenced 2 times from mask.o(.data)
 <LI><a href="#[17]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[47]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4b]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[41]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[42]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[49]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[20]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[43]">USART1_IRQHandler</a> from esp8266.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[44]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[45]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[48]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4c]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[4e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[50]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[15d]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[15e]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[15f]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[160]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[161]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[56]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[162]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[51]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[163]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[164]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[165]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[166]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[167]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[168]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[169]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[16a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[16b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[16c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[16d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[16e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[16f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[170]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[171]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[172]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[173]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[174]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[175]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[176]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[5b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[177]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[178]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[179]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[17a]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[17b]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[17c]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[17d]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[17e]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[4f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[17f]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[53]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[55]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[180]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[57]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1156 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; genRandCode &rArr; QRcode_encodeString &rArr; QRcode_encodeStringReal &rArr; QRcode_encodeInput &rArr; QRcode_encodeMask &rArr; Mask_mask &rArr; Mask_evaluateSymbol &rArr; Mask_calcN2
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[181]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[77]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[182]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))

<P><STRONG><a name="[183]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[30]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_makeMask
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_setVersion
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeStructure
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeKanji
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeAn
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeMode8
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_appendPaddingBitMQR
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_appendPaddingBit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_List_newEntry
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_splitStringToQRinput
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_newMQR
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_new2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMaskMQR
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMask
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeStringReal
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMask_makeMask
</UL>

<P><STRONG><a name="[184]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>calloc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRraw_new
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRraw_new
</UL>

<P><STRONG><a name="[5f]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_mask
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_makeMask
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_toByte
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_new
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_createFrame
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_List_newEntry
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_new2
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRraw_new
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_new
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMaskMQR
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMask
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRraw_new
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_createFrame
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMask_mask
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMask_makeMask
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
</UL>

<P><STRONG><a name="[63]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_mask
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_new
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_free
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_free
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_List_newEntry
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_List_freeEntry
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_splitStringToQRinput
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_free
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRraw_new
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRraw_free
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMaskMQR
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMask
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRraw_new
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRraw_free
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMask_mask
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[64]"></a>realloc</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, h1_realloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_expand
</UL>

<P><STRONG><a name="[94]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Send_Answer
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Send_Answer
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
</UL>

<P><STRONG><a name="[14c]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_mask
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_List_newEntry
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMaskMQR
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMask
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[66]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[186]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSECC_encode
</UL>

<P><STRONG><a name="[67]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[187]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>memcpy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_createFrame
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_createFrame
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bClearAll
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRND
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Send_Answer
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSECC_init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_createFrame
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSECC_encode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_createFrame
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[6d]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[6c]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[18d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[18f]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[190]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[70]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[52]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[72]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[69]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[194]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[71]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[195]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[59]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[75]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[74]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[5d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[78]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[79]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[144]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRND
</UL>

<P><STRONG><a name="[7a]"></a>ADC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRND
</UL>

<P><STRONG><a name="[148]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRND
</UL>

<P><STRONG><a name="[142]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRND
</UL>

<P><STRONG><a name="[141]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRND
</UL>

<P><STRONG><a name="[146]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRND
</UL>

<P><STRONG><a name="[143]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRND
</UL>

<P><STRONG><a name="[149]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRND
</UL>

<P><STRONG><a name="[145]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRND
</UL>

<P><STRONG><a name="[140]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRND
</UL>

<P><STRONG><a name="[147]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRND
</UL>

<P><STRONG><a name="[7c]"></a>BitStream_appendBytes</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bitstream.o(i.BitStream_appendBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BitStream_appendBytes &rArr; BitStream_expand &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_writeBytes
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeFNC1Second
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeMode8
</UL>

<P><STRONG><a name="[7f]"></a>BitStream_appendNum</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, bitstream.o(i.BitStream_appendNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BitStream_appendNum &rArr; BitStream_expand &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_writeNum
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeStructure
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeNum
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeKanji
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeFNC1Second
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeECI
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeAn
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeMode8
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_appendPaddingBitMQR
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_appendPaddingBit
</UL>

<P><STRONG><a name="[81]"></a>BitStream_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bitstream.o(i.BitStream_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BitStream_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_List_freeEntry
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_getByteStream
</UL>

<P><STRONG><a name="[82]"></a>BitStream_new</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bitstream.o(i.BitStream_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BitStream_new &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_getByteStream
</UL>

<P><STRONG><a name="[83]"></a>BitStream_toByte</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, bitstream.o(i.BitStream_toByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BitStream_toByte &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_getByteStream
</UL>

<P><STRONG><a name="[18]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>CalulateCRC</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, rc522.o(i.CalulateCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CalulateCRC &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
</UL>

<P><STRONG><a name="[85]"></a>ClearBitMask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rc522.o(i.ClearBitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ClearBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOff
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
</UL>

<P><STRONG><a name="[2a]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ws2812.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMACmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>DMA_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bSend
</UL>

<P><STRONG><a name="[158]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bInit
</UL>

<P><STRONG><a name="[15a]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bInit
</UL>

<P><STRONG><a name="[159]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bInit
</UL>

<P><STRONG><a name="[15b]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_SetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bSend
</UL>

<P><STRONG><a name="[1b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>ESP8266_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, esp8266.o(i.ESP8266_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ESP8266_Init &rArr; Uart1_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_System_Init
</UL>

<P><STRONG><a name="[91]"></a>ESP8266_Send_Answer</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, esp8266.o(i.ESP8266_Send_Answer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ESP8266_Send_Answer &rArr; USART1_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_Data
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRND
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttonInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beepInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[9e]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
</UL>

<P><STRONG><a name="[9a]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_off
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_System_Init
</UL>

<P><STRONG><a name="[98]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_on
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_System_Init
</UL>

<P><STRONG><a name="[139]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beepState
</UL>

<P><STRONG><a name="[15c]"></a>GRB_to_RGB</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, ws2812.o(i.GRB_to_RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GRB_to_RGB
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bSet
</UL>

<P><STRONG><a name="[16]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13e]"></a>HexToStr</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, commonfunction.o(i.HexToStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HexToStr
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genRandCode
</UL>

<P><STRONG><a name="[97]"></a>I2C_Start</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, oled.o(i.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
</UL>

<P><STRONG><a name="[9b]"></a>I2C_Stop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, oled.o(i.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
</UL>

<P><STRONG><a name="[9c]"></a>I2C_WaitAck</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, oled.o(i.I2C_WaitAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_WaitAck
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
</UL>

<P><STRONG><a name="[99]"></a>IIC_delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, oled.o(i.IIC_delay))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[9d]"></a>Key_Scan</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, button.o(i.Key_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Key_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>M500PcdConfigISOType</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, rc522.o(i.M500PcdConfigISOType))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = M500PcdConfigISOType &rArr; PcdAntennaOn &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_10ms
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_System_Init
</UL>

<P><STRONG><a name="[a7]"></a>MMask_evaluateSymbol</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, mmask.o(i.MMask_evaluateSymbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MMask_evaluateSymbol
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMask_mask
</UL>

<P><STRONG><a name="[a2]"></a>MMask_makeMask</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, mmask.o(i.MMask_makeMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MMask_makeMask &rArr; MMask_writeFormatInformation &rArr; MQRspec_getFormatInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_getWidth
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMask_writeFormatInformation
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMaskMQR
</UL>

<P><STRONG><a name="[a6]"></a>MMask_mask</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, mmask.o(i.MMask_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MMask_mask &rArr; MMask_writeFormatInformation &rArr; MQRspec_getFormatInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_getWidth
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMask_writeFormatInformation
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMask_evaluateSymbol
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMaskMQR
</UL>

<P><STRONG><a name="[a5]"></a>MMask_writeFormatInformation</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, mmask.o(i.MMask_writeFormatInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MMask_writeFormatInformation &rArr; MQRspec_getFormatInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_getFormatInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMask_mask
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMask_makeMask
</UL>

<P><STRONG><a name="[a9]"></a>MQRraw_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, qrencode.o(i.MQRraw_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQRraw_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMaskMQR
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRraw_new
</UL>

<P><STRONG><a name="[db]"></a>MQRraw_getCode</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, qrencode.o(i.MQRraw_getCode))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMaskMQR
</UL>

<P><STRONG><a name="[aa]"></a>MQRraw_new</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, qrencode.o(i.MQRraw_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = MQRraw_new &rArr; QRinput_getByteStream &rArr; QRinput_getBitStream &rArr; QRinput_mergeBitStream &rArr; QRinput_convertData &rArr; QRinput_createBitStream &rArr; QRinput_encodeBitStream &rArr;  QRinput_encodeBitStream (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_getByteStream
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRraw_free
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSblock_initBlock
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_getECCLength
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_getDataLengthBit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_getDataLength
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMaskMQR
</UL>

<P><STRONG><a name="[ab]"></a>MQRspec_getDataLength</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mqrspec.o(i.MQRspec_getDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MQRspec_getDataLength &rArr; MQRspec_getDataLengthBit
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_getDataLengthBit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRraw_new
</UL>

<P><STRONG><a name="[ad]"></a>MQRspec_getDataLengthBit</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, mqrspec.o(i.MQRspec_getDataLengthBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MQRspec_getDataLengthBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_appendPaddingBitMQR
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRraw_new
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_getDataLength
</UL>

<P><STRONG><a name="[ac]"></a>MQRspec_getECCLength</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mqrspec.o(i.MQRspec_getECCLength))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_newMQR
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRraw_new
</UL>

<P><STRONG><a name="[a8]"></a>MQRspec_getFormatInfo</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, mqrspec.o(i.MQRspec_getFormatInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MQRspec_getFormatInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMask_writeFormatInformation
</UL>

<P><STRONG><a name="[a4]"></a>MQRspec_getWidth</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mqrspec.o(i.MQRspec_getWidth))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMaskMQR
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMask_mask
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMask_makeMask
</UL>

<P><STRONG><a name="[ff]"></a>MQRspec_lengthIndicator</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mqrspec.o(i.MQRspec_lengthIndicator))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitStreamSizeOfEntry
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeNum
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeKanji
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeAn
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeMode8
</UL>

<P><STRONG><a name="[f6]"></a>MQRspec_maximumWords</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, mqrspec.o(i.MQRspec_maximumWords))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MQRspec_maximumWords
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeBitStream
</UL>

<P><STRONG><a name="[b2]"></a>MQRspec_newFrame</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mqrspec.o(i.MQRspec_newFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = MQRspec_newFrame &rArr; MQRspec_createFrame &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_createFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMaskMQR
</UL>

<P><STRONG><a name="[b6]"></a>Mask_calcN1N3</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, mask.o(i.Mask_calcN1N3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Mask_calcN1N3
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_evaluateSymbol
</UL>

<P><STRONG><a name="[b4]"></a>Mask_calcN2</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, mask.o(i.Mask_calcN2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Mask_calcN2
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_evaluateSymbol
</UL>

<P><STRONG><a name="[b5]"></a>Mask_calcRunLengthH</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mask.o(i.Mask_calcRunLengthH))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mask_calcRunLengthH
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_evaluateSymbol
</UL>

<P><STRONG><a name="[b7]"></a>Mask_calcRunLengthV</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, mask.o(i.Mask_calcRunLengthV))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mask_calcRunLengthV
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_evaluateSymbol
</UL>

<P><STRONG><a name="[b3]"></a>Mask_evaluateSymbol</STRONG> (Thumb, 104 bytes, Stack size 740 bytes, mask.o(i.Mask_evaluateSymbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = Mask_evaluateSymbol &rArr; Mask_calcN2
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_calcRunLengthV
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_calcRunLengthH
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_calcN2
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_calcN1N3
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_mask
</UL>

<P><STRONG><a name="[b8]"></a>Mask_makeMask</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mask.o(i.Mask_makeMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Mask_makeMask &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_writeFormatInformation
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMask
</UL>

<P><STRONG><a name="[ba]"></a>Mask_mask</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, mask.o(i.Mask_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = Mask_mask &rArr; Mask_evaluateSymbol &rArr; Mask_calcN2
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_writeFormatInformation
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_evaluateSymbol
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMask
</UL>

<P><STRONG><a name="[b9]"></a>Mask_writeFormatInformation</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, mask.o(i.Mask_writeFormatInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Mask_writeFormatInformation
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_getFormatInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_mask
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_makeMask
</UL>

<P><STRONG><a name="[17]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[133]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bInit
</UL>

<P><STRONG><a name="[bc]"></a>OLED_Clear</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, oled.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Clear &rArr; OLED_Refresh &rArr; OLED_WR_Byte &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>OLED_ColorTurn</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, oled.o(i.OLED_ColorTurn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_ColorTurn &rArr; OLED_WR_Byte &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_System_Init
</UL>

<P><STRONG><a name="[c0]"></a>OLED_DisplayTurn</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, oled.o(i.OLED_DisplayTurn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_DisplayTurn &rArr; OLED_WR_Byte &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_System_Init
</UL>

<P><STRONG><a name="[c6]"></a>OLED_DrawPoint</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, oled.o(i.OLED_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>

<P><STRONG><a name="[c1]"></a>OLED_Init</STRONG> (Thumb, 334 bytes, Stack size 8 bytes, oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_Init &rArr; OLED_Clear &rArr; OLED_Refresh &rArr; OLED_WR_Byte &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_System_Init
</UL>

<P><STRONG><a name="[bd]"></a>OLED_Refresh</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, oled.o(i.OLED_Refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_Refresh &rArr; OLED_WR_Byte &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>OLED_ShowChar</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, oled.o(i.OLED_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OLED_ShowChar &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>

<P><STRONG><a name="[c7]"></a>OLED_ShowString</STRONG> (Thumb, 74 bytes, Stack size 28 bytes, oled.o(i.OLED_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>OLED_WR_Byte</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oled.o(i.OLED_WR_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_WR_Byte &rArr; Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Byte
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisplayTurn
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ColorTurn
</UL>

<P><STRONG><a name="[c8]"></a>PcdAntennaOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rc522.o(i.PcdAntennaOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PcdAntennaOff &rArr; ClearBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_System_Init
</UL>

<P><STRONG><a name="[a1]"></a>PcdAntennaOn</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rc522.o(i.PcdAntennaOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PcdAntennaOn &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_System_Init
</UL>

<P><STRONG><a name="[c9]"></a>PcdAnticoll</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, rc522.o(i.PcdAnticoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PcdAnticoll &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>PcdAuthState</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, rc522.o(i.PcdAuthState))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PcdAuthState &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>PcdComMF522</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, rc522.o(i.PcdComMF522))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
</UL>

<P><STRONG><a name="[cc]"></a>PcdRead</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, rc522.o(i.PcdRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PcdRead &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>PcdRequest</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, rc522.o(i.PcdRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PcdRequest &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitCardOff
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>PcdReset</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, rc522.o(i.PcdReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PcdReset &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_10ms
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_System_Init
</UL>

<P><STRONG><a name="[cf]"></a>PcdSelect</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, rc522.o(i.PcdSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PcdSelect &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>QRcode_encodeInput</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, qrencode.o(i.QRcode_encodeInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 916 + Unknown Stack Size
<LI>Call Chain = QRcode_encodeInput &rArr; QRcode_encodeMask &rArr; Mask_mask &rArr; Mask_evaluateSymbol &rArr; Mask_calcN2
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMaskMQR
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMask
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeStringReal
</UL>

<P><STRONG><a name="[d2]"></a>QRcode_encodeMask</STRONG> (Thumb, 448 bytes, Stack size 88 bytes, qrencode.o(i.QRcode_encodeMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 908 + Unknown Stack Size
<LI>Call Chain = QRcode_encodeMask &rArr; Mask_mask &rArr; Mask_evaluateSymbol &rArr; Mask_calcN2
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_mask
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_makeMask
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_newFrame
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_getWidth
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_getRemainder
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRraw_new
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRraw_getCode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRraw_free
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_new
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameFiller_set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameFiller_next
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeInput
</UL>

<P><STRONG><a name="[d1]"></a>QRcode_encodeMaskMQR</STRONG> (Thumb, 448 bytes, Stack size 96 bytes, qrencode.o(i.QRcode_encodeMaskMQR))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = QRcode_encodeMaskMQR &rArr; MQRraw_new &rArr; QRinput_getByteStream &rArr; QRinput_getBitStream &rArr; QRinput_mergeBitStream &rArr; QRinput_convertData &rArr; QRinput_createBitStream &rArr; QRinput_encodeBitStream &rArr;  QRinput_encodeBitStream (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_new
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRraw_new
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRraw_getCode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRraw_free
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameFiller_set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameFiller_next
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_newFrame
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_getWidth
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMask_mask
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMask_makeMask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeInput
</UL>

<P><STRONG><a name="[dc]"></a>QRcode_encodeString</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, qrencode.o(i.QRcode_encodeString))
<BR><BR>[Stack]<UL><LI>Max Depth = 988 + Unknown Stack Size
<LI>Call Chain = QRcode_encodeString &rArr; QRcode_encodeStringReal &rArr; QRcode_encodeInput &rArr; QRcode_encodeMask &rArr; Mask_mask &rArr; Mask_evaluateSymbol &rArr; Mask_calcN2
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeStringReal
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genRandCode
</UL>

<P><STRONG><a name="[e2]"></a>QRcode_free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, qrencode.o(i.QRcode_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QRcode_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genRandCode
</UL>

<P><STRONG><a name="[da]"></a>QRcode_new</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, qrencode.o(i.QRcode_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = QRcode_new &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMaskMQR
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMask
</UL>

<P><STRONG><a name="[e6]"></a>QRinput_append</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, qrinput.o(i.QRinput_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = QRinput_append &rArr; QRinput_List_newEntry &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_appendEntry
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_List_newEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eatNum
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eatKanji
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eatAn
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eat8
</UL>

<P><STRONG><a name="[e5]"></a>QRinput_check</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, qrinput.o(i.QRinput_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = QRinput_check &rArr; QRinput_checkModeKanji
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_checkModeNum
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_checkModeKanji
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_checkModeFNC1Second
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_checkModeAn
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_List_newEntry
</UL>

<P><STRONG><a name="[102]"></a>QRinput_estimateBitStreamSize</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, qrinput.o(i.QRinput_estimateBitStreamSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = QRinput_estimateBitStreamSize &rArr; QRinput_estimateBitStreamSizeOfEntry &rArr; QRspec_lengthIndicator
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitStreamSizeOfEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateVersion
</UL>

<P><STRONG><a name="[106]"></a>QRinput_estimateBitsMode8</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qrinput.o(i.QRinput_estimateBitsMode8))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitStreamSizeOfEntry
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eatNum
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eatAn
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eat8
</UL>

<P><STRONG><a name="[105]"></a>QRinput_estimateBitsModeAn</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, qrinput.o(i.QRinput_estimateBitsModeAn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QRinput_estimateBitsModeAn
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitStreamSizeOfEntry
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eatNum
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eatAn
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eat8
</UL>

<P><STRONG><a name="[107]"></a>QRinput_estimateBitsModeKanji</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, qrinput.o(i.QRinput_estimateBitsModeKanji))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitStreamSizeOfEntry
</UL>

<P><STRONG><a name="[104]"></a>QRinput_estimateBitsModeNum</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, qrinput.o(i.QRinput_estimateBitsModeNum))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitStreamSizeOfEntry
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eatNum
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eatAn
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eat8
</UL>

<P><STRONG><a name="[f0]"></a>QRinput_estimateVersion</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, qrinput.o(i.QRinput_estimateVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = QRinput_estimateVersion &rArr; QRinput_estimateBitStreamSize &rArr; QRinput_estimateBitStreamSizeOfEntry &rArr; QRspec_lengthIndicator
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_getMinimumVersion
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitStreamSize
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_convertData
</UL>

<P><STRONG><a name="[e1]"></a>QRinput_free</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, qrinput.o(i.QRinput_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = QRinput_free &rArr; QRinput_List_freeEntry &rArr; BitStream_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_List_freeEntry
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeStringReal
</UL>

<P><STRONG><a name="[109]"></a>QRinput_getBitStream</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, qrinput.o(i.QRinput_getBitStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = QRinput_getBitStream &rArr; QRinput_mergeBitStream &rArr; QRinput_convertData &rArr; QRinput_createBitStream &rArr; QRinput_encodeBitStream &rArr;  QRinput_encodeBitStream (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_mergeBitStream
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_appendPaddingBitMQR
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_appendPaddingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_getByteStream
</UL>

<P><STRONG><a name="[ae]"></a>QRinput_getByteStream</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, qrinput.o(i.QRinput_getByteStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = QRinput_getByteStream &rArr; QRinput_getBitStream &rArr; QRinput_mergeBitStream &rArr; QRinput_convertData &rArr; QRinput_createBitStream &rArr; QRinput_encodeBitStream &rArr;  QRinput_encodeBitStream (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_toByte
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_new
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_free
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_getBitStream
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRraw_new
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRraw_new
</UL>

<P><STRONG><a name="[f1]"></a>QRinput_getVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qrinput.o(i.QRinput_getVersion))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_convertData
</UL>

<P><STRONG><a name="[113]"></a>QRinput_isSplittableMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, qrinput.o(i.QRinput_isSplittableMode))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_maximumWords
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_lengthIndicator
</UL>

<P><STRONG><a name="[10a]"></a>QRinput_mergeBitStream</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, qrinput.o(i.QRinput_mergeBitStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = QRinput_mergeBitStream &rArr; QRinput_convertData &rArr; QRinput_createBitStream &rArr; QRinput_encodeBitStream &rArr;  QRinput_encodeBitStream (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_insertFNC1Header
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_createBitStream
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_convertData
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_getBitStream
</UL>

<P><STRONG><a name="[df]"></a>QRinput_new2</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, qrinput.o(i.QRinput_new2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = QRinput_new2 &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_newMQR
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeStringReal
</UL>

<P><STRONG><a name="[de]"></a>QRinput_newMQR</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, qrinput.o(i.QRinput_newMQR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = QRinput_newMQR &rArr; QRinput_new2 &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_new2
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_getECCLength
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeStringReal
</UL>

<P><STRONG><a name="[f2]"></a>QRinput_setVersion</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, qrinput.o(i.QRinput_setVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QRinput_setVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_convertData
</UL>

<P><STRONG><a name="[d6]"></a>QRraw_free</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, qrencode.o(i.QRraw_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QRraw_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRraw_new
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMask
</UL>

<P><STRONG><a name="[d8]"></a>QRraw_getCode</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, qrencode.o(i.QRraw_getCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QRraw_getCode
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMask
</UL>

<P><STRONG><a name="[d3]"></a>QRraw_new</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, qrencode.o(i.QRraw_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = QRraw_new &rArr; QRinput_getByteStream &rArr; QRinput_getBitStream &rArr; QRinput_mergeBitStream &rArr; QRinput_convertData &rArr; QRinput_createBitStream &rArr; QRinput_encodeBitStream &rArr;  QRinput_encodeBitStream (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_getEccSpec
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_getByteStream
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRraw_free
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSblock_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMask
</UL>

<P><STRONG><a name="[e9]"></a>QRspec_getDataLength</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, qrspec.o(i.QRspec_getDataLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QRspec_getDataLength
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_appendPaddingBit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_getEccSpec
</UL>

<P><STRONG><a name="[112]"></a>QRspec_getECCLength</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, qrspec.o(i.QRspec_getECCLength))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_getEccSpec
</UL>

<P><STRONG><a name="[10c]"></a>QRspec_getEccSpec</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, qrspec.o(i.QRspec_getEccSpec))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QRspec_getEccSpec &rArr; QRspec_getDataLength
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_getECCLength
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_getDataLength
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRraw_new
</UL>

<P><STRONG><a name="[bb]"></a>QRspec_getFormatInfo</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, qrspec.o(i.QRspec_getFormatInfo))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mask_writeFormatInformation
</UL>

<P><STRONG><a name="[f4]"></a>QRspec_getMinimumVersion</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, qrspec.o(i.QRspec_getMinimumVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QRspec_getMinimumVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateVersion
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_convertData
</UL>

<P><STRONG><a name="[d9]"></a>QRspec_getRemainder</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, qrspec.o(i.QRspec_getRemainder))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMask
</UL>

<P><STRONG><a name="[111]"></a>QRspec_getVersionPattern</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, qrspec.o(i.QRspec_getVersionPattern))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_createFrame
</UL>

<P><STRONG><a name="[d4]"></a>QRspec_getWidth</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, qrspec.o(i.QRspec_getWidth))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMask
</UL>

<P><STRONG><a name="[100]"></a>QRspec_lengthIndicator</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, qrspec.o(i.QRspec_lengthIndicator))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QRspec_lengthIndicator
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_isSplittableMode
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitStreamSizeOfEntry
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeNum
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeKanji
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeAn
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeMode8
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eatNum
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eatAn
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eat8
</UL>

<P><STRONG><a name="[f7]"></a>QRspec_maximumWords</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, qrspec.o(i.QRspec_maximumWords))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QRspec_maximumWords
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_isSplittableMode
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeBitStream
</UL>

<P><STRONG><a name="[d5]"></a>QRspec_newFrame</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, qrspec.o(i.QRspec_newFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = QRspec_newFrame &rArr; QRspec_createFrame &rArr; QRspec_putAlignmentPattern &rArr; QRspec_putAlignmentMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_createFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMask
</UL>

<P><STRONG><a name="[115]"></a>RC522_Init</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, rc522.o(i.RC522_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RC522_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_System_Init
</UL>

<P><STRONG><a name="[116]"></a>RC522_System_Init</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, main.o(i.RC522_System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = RC522_System_Init &rArr; ESP8266_Init &rArr; Uart1_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_10ms
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttonInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beepInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOff
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DisplayTurn
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ColorTurn
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bInit
</UL>

<P><STRONG><a name="[12a]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[c2]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRND
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buttonInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beepInit
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[7b]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[12f]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[11b]"></a>RSECC_encode</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, rsecc.o(i.RSECC_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RSECC_encode &rArr; generator_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generator_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSECC_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSblock_initBlock
</UL>

<P><STRONG><a name="[88]"></a>ReadRawRC</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, rc522.o(i.ReadRawRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
</UL>

<P><STRONG><a name="[1a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>Send_Byte</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, oled.o(i.Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WR_Byte
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
</UL>

<P><STRONG><a name="[87]"></a>SetBitMask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rc522.o(i.SetBitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
</UL>

<P><STRONG><a name="[e0]"></a>Split_splitStringToQRinput</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, split.o(i.Split_splitStringToQRinput))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Split_splitStringToQRinput &rArr; Split_splitString &rArr; Split_eatNum &rArr; Split_eatAn &rArr; Split_eat8 &rArr; QRinput_append &rArr; QRinput_List_newEntry &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dupAndToUpper
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_splitString
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeStringReal
</UL>

<P><STRONG><a name="[13a]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[1d]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[157]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bInit
</UL>

<P><STRONG><a name="[8a]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bSend
</UL>

<P><STRONG><a name="[156]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bInit
</UL>

<P><STRONG><a name="[8d]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bSend
</UL>

<P><STRONG><a name="[129]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bInit
</UL>

<P><STRONG><a name="[154]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bInit
</UL>

<P><STRONG><a name="[155]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bInit
</UL>

<P><STRONG><a name="[153]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bInit
</UL>

<P><STRONG><a name="[43]"></a>USART1_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, esp8266.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>USART1_Send_Data</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, esp8266.o(i.USART1_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Send_Answer
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>

<P><STRONG><a name="[12c]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_Data
</UL>

<P><STRONG><a name="[12b]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>

<P><STRONG><a name="[12e]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Init
</UL>

<P><STRONG><a name="[12d]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_Data
</UL>

<P><STRONG><a name="[90]"></a>Uart1_Init</STRONG> (Thumb, 208 bytes, Stack size 80 bytes, esp8266.o(i.Uart1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Uart1_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
</UL>

<P><STRONG><a name="[19]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[134]"></a>WaitCardOff</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rc522.o(i.WaitCardOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WaitCardOff &rArr; PcdRequest &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_10ms
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[135]"></a>Wheel</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ws2812.o(i.Wheel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Wheel &rArr; setvalue
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rainbowCycle
</UL>

<P><STRONG><a name="[86]"></a>WriteRawRC</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, rc522.o(i.WriteRawRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteRawRC
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
</UL>

<P><STRONG><a name="[117]"></a>beepInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, beep.o(i.beepInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = beepInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beepState
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_System_Init
</UL>

<P><STRONG><a name="[138]"></a>beepOneSecOn</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, beep.o(i.beepOneSecOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = beepOneSecOn &rArr; beepState
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beepState
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>beepState</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, beep.o(i.beepState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = beepState
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beepOneSecOn
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beepInit
</UL>

<P><STRONG><a name="[119]"></a>buttonInit</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, button.o(i.buttonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = buttonInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_System_Init
</UL>

<P><STRONG><a name="[a0]"></a>delay_10ms</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rc522.o(i.delay_10ms))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitCardOff
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_System_Init
</UL>

<P><STRONG><a name="[8f]"></a>delay_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beepInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
</UL>

<P><STRONG><a name="[95]"></a>delay_ms</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rainbowCycle
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beepOneSecOn
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Send_Answer
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>genRandCode</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, main.o(i.genRandCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036 + Unknown Stack Size
<LI>Call Chain = genRandCode &rArr; QRcode_encodeString &rArr; QRcode_encodeStringReal &rArr; QRcode_encodeInput &rArr; QRcode_encodeMask &rArr; Mask_mask &rArr; Mask_evaluateSymbol &rArr; Mask_calcN2
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRND
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_free
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeString
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13d]"></a>getRND</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, rand.o(i.getRND))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = getRND &rArr; initRND &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRND
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genRandCode
</UL>

<P><STRONG><a name="[13f]"></a>initRND</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, rand.o(i.initRND))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = initRND &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRND
</UL>

<P><STRONG><a name="[58]"></a>main</STRONG> (Thumb, 2308 bytes, Stack size 120 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1156 + Unknown Stack Size
<LI>Call Chain = main &rArr; genRandCode &rArr; QRcode_encodeString &rArr; QRcode_encodeStringReal &rArr; QRcode_encodeInput &rArr; QRcode_encodeMask &rArr; Mask_mask &rArr; Mask_evaluateSymbol &rArr; Mask_calcN2
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bSetAll
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_on
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_off
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rainbowCycle
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_10ms
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beepOneSecOn
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitCardOff
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Send_Data
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Refresh
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToStr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Send_Answer
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genRandCode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_System_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[14a]"></a>rainbowCycle</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ws2812.o(i.rainbowCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rainbowCycle &rArr; ws2812bSet &rArr; GRB_to_RGB
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bSet
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>relay_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, relay.o(i.relay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = relay_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_System_Init
</UL>

<P><STRONG><a name="[14f]"></a>relay_off</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, relay.o(i.relay_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = relay_off
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>relay_on</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, relay.o(i.relay_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = relay_on
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>setvalue</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ws2812.o(i.setvalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setvalue
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wheel
</UL>

<P><STRONG><a name="[13b]"></a>strdup</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, split.o(i.strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = strdup &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dupAndToUpper
</UL>

<P><STRONG><a name="[151]"></a>ws2812bClearAll</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ws2812.o(i.ws2812bClearAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ws2812bClearAll &rArr; ws2812bSend
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bSend
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bInit
</UL>

<P><STRONG><a name="[118]"></a>ws2812bInit</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, ws2812.o(i.ws2812bInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ws2812bInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bClearAll
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC522_System_Init
</UL>

<P><STRONG><a name="[150]"></a>ws2812bSet</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ws2812.o(i.ws2812bSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ws2812bSet &rArr; GRB_to_RGB
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GRB_to_RGB
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bSend
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bSetAll
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rainbowCycle
</UL>

<P><STRONG><a name="[14d]"></a>ws2812bSetAll</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ws2812.o(i.ws2812bSetAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ws2812bSetAll &rArr; ws2812bSet &rArr; GRB_to_RGB
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bSet
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[120]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[121]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[152]"></a>ws2812bSend</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ws2812.o(i.ws2812bSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ws2812bSend
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMACmd
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bSet
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ws2812bClearAll
</UL>

<P><STRONG><a name="[7d]"></a>BitStream_expand</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bitstream.o(i.BitStream_expand))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BitStream_expand &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_appendNum
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_appendBytes
</UL>

<P><STRONG><a name="[7e]"></a>BitStream_writeBytes</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, bitstream.o(i.BitStream_writeBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BitStream_writeBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_appendBytes
</UL>

<P><STRONG><a name="[80]"></a>BitStream_writeNum</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, bitstream.o(i.BitStream_writeNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BitStream_writeNum
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_appendNum
</UL>

<P><STRONG><a name="[8]"></a>Mask_mask0</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, mask.o(i.Mask_mask0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Mask_mask0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mask.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>Mask_mask1</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, mask.o(i.Mask_mask1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Mask_mask1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mask.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>Mask_mask2</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, mask.o(i.Mask_mask2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Mask_mask2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mask.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>Mask_mask3</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, mask.o(i.Mask_mask3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Mask_mask3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mask.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>Mask_mask4</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, mask.o(i.Mask_mask4))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Mask_mask4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mask.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>Mask_mask5</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, mask.o(i.Mask_mask5))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Mask_mask5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mask.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Mask_mask6</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, mask.o(i.Mask_mask6))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Mask_mask6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mask.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Mask_mask7</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, mask.o(i.Mask_mask7))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Mask_mask7
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mask.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>Mask_mask0</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mmask.o(i.Mask_mask0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mask_mask0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmask.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>Mask_mask1</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, mmask.o(i.Mask_mask1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Mask_mask1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmask.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>Mask_mask2</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, mmask.o(i.Mask_mask2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Mask_mask2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmask.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>Mask_mask3</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, mmask.o(i.Mask_mask3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Mask_mask3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmask.o(.data)
</UL>
<P><STRONG><a name="[b0]"></a>MQRspec_createFrame</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, mqrspec.o(i.MQRspec_createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = MQRspec_createFrame &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putFinderPattern
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_newFrame
</UL>

<P><STRONG><a name="[b1]"></a>putFinderPattern</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, mqrspec.o(i.putFinderPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = putFinderPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_createFrame
</UL>

<P><STRONG><a name="[96]"></a>FrameFiller_next</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, qrencode.o(i.FrameFiller_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = FrameFiller_next &rArr;  FrameFiller_next (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameFiller_next
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMaskMQR
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMask
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameFiller_next
</UL>

<P><STRONG><a name="[d7]"></a>FrameFiller_set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, qrencode.o(i.FrameFiller_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FrameFiller_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMaskMQR
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeMask
</UL>

<P><STRONG><a name="[dd]"></a>QRcode_encodeStringReal</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, qrencode.o(i.QRcode_encodeStringReal))
<BR><BR>[Stack]<UL><LI>Max Depth = 956 + Unknown Stack Size
<LI>Call Chain = QRcode_encodeStringReal &rArr; QRcode_encodeInput &rArr; QRcode_encodeMask &rArr; Mask_mask &rArr; Mask_evaluateSymbol &rArr; Mask_calcN2
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_splitStringToQRinput
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_newMQR
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_new2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_free
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeInput
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRcode_encodeString
</UL>

<P><STRONG><a name="[10d]"></a>RSblock_init</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, qrencode.o(i.RSblock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = RSblock_init &rArr; RSblock_initBlock &rArr; RSECC_encode &rArr; generator_init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSblock_initBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRraw_new
</UL>

<P><STRONG><a name="[af]"></a>RSblock_initBlock</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, qrencode.o(i.RSblock_initBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RSblock_initBlock &rArr; RSECC_encode &rArr; generator_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSECC_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRraw_new
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSblock_init
</UL>

<P><STRONG><a name="[e3]"></a>QRinput_List_freeEntry</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, qrinput.o(i.QRinput_List_freeEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QRinput_List_freeEntry &rArr; BitStream_free &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_free
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeBitStream
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_free
</UL>

<P><STRONG><a name="[e4]"></a>QRinput_List_newEntry</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, qrinput.o(i.QRinput_List_newEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = QRinput_List_newEntry &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_check
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_insertFNC1Header
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeBitStream
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_append
</UL>

<P><STRONG><a name="[e7]"></a>QRinput_appendEntry</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, qrinput.o(i.QRinput_appendEntry))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_append
</UL>

<P><STRONG><a name="[e8]"></a>QRinput_appendPaddingBit</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, qrinput.o(i.QRinput_appendPaddingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = QRinput_appendPaddingBit &rArr; BitStream_appendNum &rArr; BitStream_expand &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_appendNum
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_getDataLength
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_getBitStream
</UL>

<P><STRONG><a name="[ea]"></a>QRinput_appendPaddingBitMQR</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, qrinput.o(i.QRinput_appendPaddingBitMQR))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = QRinput_appendPaddingBitMQR &rArr; BitStream_appendNum &rArr; BitStream_expand &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_appendNum
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_getDataLengthBit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_getBitStream
</UL>

<P><STRONG><a name="[ec]"></a>QRinput_checkModeAn</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, qrinput.o(i.QRinput_checkModeAn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QRinput_checkModeAn
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_check
</UL>

<P><STRONG><a name="[ee]"></a>QRinput_checkModeFNC1Second</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, qrinput.o(i.QRinput_checkModeFNC1Second))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_check
</UL>

<P><STRONG><a name="[ed]"></a>QRinput_checkModeKanji</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, qrinput.o(i.QRinput_checkModeKanji))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = QRinput_checkModeKanji
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_check
</UL>

<P><STRONG><a name="[eb]"></a>QRinput_checkModeNum</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, qrinput.o(i.QRinput_checkModeNum))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_check
</UL>

<P><STRONG><a name="[ef]"></a>QRinput_convertData</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, qrinput.o(i.QRinput_convertData))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = QRinput_convertData &rArr; QRinput_createBitStream &rArr; QRinput_encodeBitStream &rArr;  QRinput_encodeBitStream (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_getMinimumVersion
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_setVersion
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_getVersion
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateVersion
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_createBitStream
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_mergeBitStream
</UL>

<P><STRONG><a name="[f3]"></a>QRinput_createBitStream</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, qrinput.o(i.QRinput_createBitStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = QRinput_createBitStream &rArr; QRinput_encodeBitStream &rArr;  QRinput_encodeBitStream (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeBitStream
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_mergeBitStream
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_convertData
</UL>

<P><STRONG><a name="[101]"></a>QRinput_decodeECIfromByteArray</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, qrinput.o(i.QRinput_decodeECIfromByteArray))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitsModeECI
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeECI
</UL>

<P><STRONG><a name="[f5]"></a>QRinput_encodeBitStream</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, qrinput.o(i.QRinput_encodeBitStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + In Cycle
<LI>Call Chain = QRinput_encodeBitStream &rArr;  QRinput_encodeBitStream (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_maximumWords
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeStructure
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeNum
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeKanji
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeFNC1Second
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeECI
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeModeAn
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeMode8
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeBitStream
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_List_newEntry
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_List_freeEntry
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_maximumWords
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeBitStream
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_createBitStream
</UL>

<P><STRONG><a name="[fa]"></a>QRinput_encodeMode8</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, qrinput.o(i.QRinput_encodeMode8))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = QRinput_encodeMode8 &rArr; BitStream_appendNum &rArr; BitStream_expand &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_appendNum
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_appendBytes
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_lengthIndicator
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_lengthIndicator
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeBitStream
</UL>

<P><STRONG><a name="[f9]"></a>QRinput_encodeModeAn</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, qrinput.o(i.QRinput_encodeModeAn))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = QRinput_encodeModeAn &rArr; BitStream_appendNum &rArr; BitStream_expand &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_appendNum
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_lengthIndicator
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_lengthIndicator
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeBitStream
</UL>

<P><STRONG><a name="[fd]"></a>QRinput_encodeModeECI</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, qrinput.o(i.QRinput_encodeModeECI))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = QRinput_encodeModeECI &rArr; BitStream_appendNum &rArr; BitStream_expand &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_appendNum
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_decodeECIfromByteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeBitStream
</UL>

<P><STRONG><a name="[fe]"></a>QRinput_encodeModeFNC1Second</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, qrinput.o(i.QRinput_encodeModeFNC1Second))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = QRinput_encodeModeFNC1Second &rArr; BitStream_appendNum &rArr; BitStream_expand &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_appendNum
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_appendBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeBitStream
</UL>

<P><STRONG><a name="[fb]"></a>QRinput_encodeModeKanji</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, qrinput.o(i.QRinput_encodeModeKanji))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = QRinput_encodeModeKanji &rArr; BitStream_appendNum &rArr; BitStream_expand &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_appendNum
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_lengthIndicator
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_lengthIndicator
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeBitStream
</UL>

<P><STRONG><a name="[f8]"></a>QRinput_encodeModeNum</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, qrinput.o(i.QRinput_encodeModeNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = QRinput_encodeModeNum &rArr; BitStream_appendNum &rArr; BitStream_expand &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_appendNum
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_lengthIndicator
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_lengthIndicator
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeBitStream
</UL>

<P><STRONG><a name="[fc]"></a>QRinput_encodeModeStructure</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, qrinput.o(i.QRinput_encodeModeStructure))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = QRinput_encodeModeStructure &rArr; BitStream_appendNum &rArr; BitStream_expand &rArr; realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStream_appendNum
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_encodeBitStream
</UL>

<P><STRONG><a name="[103]"></a>QRinput_estimateBitStreamSizeOfEntry</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, qrinput.o(i.QRinput_estimateBitStreamSizeOfEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = QRinput_estimateBitStreamSizeOfEntry &rArr; QRspec_lengthIndicator
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_lengthIndicator
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitsModeNum
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitsModeKanji
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitsModeAn
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitsMode8
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitsModeECI
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQRspec_lengthIndicator
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitStreamSize
</UL>

<P><STRONG><a name="[108]"></a>QRinput_estimateBitsModeECI</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, qrinput.o(i.QRinput_estimateBitsModeECI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QRinput_estimateBitsModeECI
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_decodeECIfromByteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitStreamSizeOfEntry
</UL>

<P><STRONG><a name="[10b]"></a>QRinput_insertFNC1Header</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, qrinput.o(i.QRinput_insertFNC1Header))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = QRinput_insertFNC1Header &rArr; QRinput_List_newEntry &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_List_newEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_mergeBitStream
</UL>

<P><STRONG><a name="[10e]"></a>QRspec_createFrame</STRONG> (Thumb, 452 bytes, Stack size 40 bytes, qrspec.o(i.QRspec_createFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = QRspec_createFrame &rArr; QRspec_putAlignmentPattern &rArr; QRspec_putAlignmentMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_getVersionPattern
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putFinderPattern
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_putAlignmentPattern
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_newFrame
</UL>

<P><STRONG><a name="[114]"></a>QRspec_putAlignmentMarker</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, qrspec.o(i.QRspec_putAlignmentMarker))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = QRspec_putAlignmentMarker
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_putAlignmentPattern
</UL>

<P><STRONG><a name="[110]"></a>QRspec_putAlignmentPattern</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, qrspec.o(i.QRspec_putAlignmentPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = QRspec_putAlignmentPattern &rArr; QRspec_putAlignmentMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_putAlignmentMarker
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_createFrame
</UL>

<P><STRONG><a name="[10f]"></a>putFinderPattern</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, qrspec.o(i.putFinderPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = putFinderPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_createFrame
</UL>

<P><STRONG><a name="[11c]"></a>RSECC_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rsecc.o(i.RSECC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RSECC_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSECC_initLookupTable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSECC_encode
</UL>

<P><STRONG><a name="[11f]"></a>RSECC_initLookupTable</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rsecc.o(i.RSECC_initLookupTable))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSECC_init
</UL>

<P><STRONG><a name="[11d]"></a>generator_init</STRONG> (Thumb, 140 bytes, Stack size 136 bytes, rsecc.o(i.generator_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = generator_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RSECC_encode
</UL>

<P><STRONG><a name="[122]"></a>Split_eat8</STRONG> (Thumb, 320 bytes, Stack size 72 bytes, split.o(i.Split_eat8))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Split_eat8 &rArr; QRinput_append &rArr; QRinput_List_newEntry &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_lengthIndicator
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitsModeNum
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitsModeAn
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitsMode8
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_append
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_identifyMode
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_splitString
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eatNum
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eatAn
</UL>

<P><STRONG><a name="[124]"></a>Split_eatAn</STRONG> (Thumb, 286 bytes, Stack size 56 bytes, split.o(i.Split_eatAn))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Split_eatAn &rArr; Split_eat8 &rArr; QRinput_append &rArr; QRinput_List_newEntry &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_lengthIndicator
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitsModeNum
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitsModeAn
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitsMode8
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_append
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eat8
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_splitString
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eatNum
</UL>

<P><STRONG><a name="[125]"></a>Split_eatKanji</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, split.o(i.Split_eatKanji))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Split_eatKanji &rArr; QRinput_append &rArr; QRinput_List_newEntry &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_append
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_identifyMode
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_splitString
</UL>

<P><STRONG><a name="[126]"></a>Split_eatNum</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, split.o(i.Split_eatNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Split_eatNum &rArr; Split_eatAn &rArr; Split_eat8 &rArr; QRinput_append &rArr; QRinput_List_newEntry &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRspec_lengthIndicator
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitsModeNum
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitsModeAn
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_estimateBitsMode8
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRinput_append
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_identifyMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eatAn
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eat8
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_splitString
</UL>

<P><STRONG><a name="[123]"></a>Split_identifyMode</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, split.o(i.Split_identifyMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Split_identifyMode
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dupAndToUpper
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_splitString
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eatNum
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eatKanji
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eat8
</UL>

<P><STRONG><a name="[127]"></a>Split_splitString</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, split.o(i.Split_splitString))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Split_splitString &rArr; Split_eatNum &rArr; Split_eatAn &rArr; Split_eat8 &rArr; QRinput_append &rArr; QRinput_List_newEntry &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_identifyMode
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eatNum
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eatKanji
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eatAn
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_eat8
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_splitStringToQRinput
</UL>

<P><STRONG><a name="[128]"></a>dupAndToUpper</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, split.o(i.dupAndToUpper))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dupAndToUpper &rArr; strdup &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_identifyMode
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Split_splitStringToQRinput
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
